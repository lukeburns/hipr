#!/usr/bin/env node

const chalk = require('chalk')
const path = require('path')
const util = require('util')
const { spawn } = require('child_process')

const colors = new Map()

if (process.argv[2] === '--path') {
  return process.stdout.write(getPath())
}

if (process.argv[2] === '--install' || process.argv[2] === '-i' || process.argv[2] === 'install' || process.argv[2] === 'i') {
  if (process.argv[3]) {
    const cmd = `npm i --legacy-peer-deps --prefix ${getPath()} ${process.argv.slice(3).join(' ')}`.split(' ')
    spawn(cmd[0], cmd.slice(1), { stdio: 'inherit' })
  } else {
    console.error('No package specified')
  }
  return
}

const HOME = require('os').homedir()

let [serverHost, serverPort] = (process.argv[3] || ':53').split(':')
let [rootHost, rootPort] = (process.argv[4] || ':5349').split(':')
serverHost = serverHost || '127.0.0.1'
serverPort = parseInt(serverPort || 53)
rootHost = rootHost || '127.0.0.1'
rootPort = parseInt(rootPort || 53)

const requires = (process.argv[2] || '').split(':').filter(x => !!x)

const { RecursiveServer, createDS } = require('../index')

const server = new RecursiveServer({ tcp: true, inet6: false, edns: true, dnssec: process.argv.indexOf('--dnssec') >= 0 })
server.resolver.setStub(rootHost, rootPort, createDS())

if (process.argv.indexOf('--log') >= 0) {
  server.resolver.on('intercept', (claim, name, type, ns) => {
    const { protocol, data } = claim.params
    if (protocol) {
      colors.get(protocol) || colors.set(protocol, color(0.5))
      const c = chalk.rgb(...colors.get(protocol))
      const parent = ns.name.slice(0, ns.name.length-1)
      console.log(c`[${protocol}@${parent}]`, `${name} ${type} @ ${data}`)
    }
  })
  server.on('query', (req, res, rinfo) => {
    console.log(util.inspect(req.question[0], { breakLength: Infinity, colors: true }))
  })
  server.on('log', console.log)
  server.on('error', error => {
    console.log(error.message)
  })
}

console.log(`starting hipr@${getVersion()}`)

for (const name of requires) {
  const middleware = requiref(name)
  if (typeof middleware === 'function') {
    const path = require.resolve(name)
    console.log(`loading middleware: ${name}@${getVersion(name)}`)
    server.use(middleware())
  } else {
    console.log(`middleware not found: ${name}`)
  }
}

server.bind(serverPort, serverHost)
console.log(`listening on ${serverHost}:${serverPort}`)
console.log(`resolving with ${rootHost}:${rootPort}`)

function requiref (modulePath) {
  try {
    return require(modulePath)
  }
  catch (e) {
    return false
  }
}

function getPath (p='../') {
  return path.dirname(require.resolve(p))
}

function getVersion (p='../') {
  const dir = getPath(p)
  const json = require(path.join(dir, 'package.json'))
  return json.version
}

// https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/
function color (saturation = 0.5) {
  let hue = Math.random()
  hue += 0.618033988749895
  hue %= 1

  return hsv_to_rgb({
    h: hue,
    s: saturation,
    v: 0.95,
  })
}

function hsv_to_rgb ({ h, s, v }) {
  const h_i = Math.floor(6*h)
  const f = 6*h - h_i
  const p = v * (1 - s)
  const q = v * (1 - f*s)
  const t = v * (1 - (1 - f) * s)

  let r, g, b

  if (h_i === 0) [r, g, b] = [v, t, p]
  if (h_i === 1) [r, g, b] = [q, v, p]
  if (h_i === 2) [r, g, b] = [p, v, t]
  if (h_i === 3) [r, g, b] = [p, q, v]
  if (h_i === 4) [r, g, b] = [t, p, v]
  if (h_i === 5) [r, g, b] = [v, p, q]

  return [Math.floor(r*256), Math.floor(g*256), Math.floor(b*256)]
}